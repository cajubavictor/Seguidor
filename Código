​
#include <QTRSensors.h>
#define MOTOR_E1    6
#define MOTOR_E2    5
#define MOTOR_D1    10
#define MOTOR_D2    9
#define DEBUG         1
#define EMITTER_PIN     2 
#define NUM_SENSORES     6
#define NUM_SAMPLES_PER_SENSOR   4
#define VELOCIDADE_MAXIMA         254
/* São aproximadamente 10 us para realizar uma única conversão analog - digital. Então, se 
NUM_SAMPLES_PER_SENSOR é de 4 e NUM_SENSORES é 6, demorará 4 * 6 * 100 us = ~2.5ms para fazer
uma leitura completa. Aumentar esse parâmetro aumenta a quantidade de leitura ao custo de 
tempo de processamento.*/
float deltaTime = 0;
int kp = 0;
int kd = 0;
int kr = 0;
int erro            = 0;
int erroAnterior    = 0;
int somatorioDeErro = 0;
unsigned int sensorValues[NUM_SENSORES]; 
QTRSensorsAnalog sensores((unsigned char[]) {1, 2, 3, 4, 5, 6}, NUM_SENSORES, NUM_SAMPLES_PER_SENSOR, EMITTER_PIN);
/* QTRSensorsAnalog qtra(unsigned char* pins, unsigned char numSensors, 
   unsigned int timeout, unsigned char emitterPin);*/
void setup(){
    delay(500);
    pinMode(13, OUTPUT);
    digitalWrite(13, HIGH);
    for(int i; i < 400; i++) 
        sensores.calibrate(); 
    digitalWrite(13, LOW);
/* Faz a análise dos valores máximos e mínimos de todos 
   os sensores. */
    if(DEBUG) { 
        Serial.begin(9600); 
        for(int i = 0; i<NUM_SENSORES; i++){
            Serial.print(sensores.calibratedMinimumOn[i]);
            Serial.print(' ');
        }
        Serial.println();
        for(int i = 0; i<NUM_SENSORES; i++){
            Serial.print(sensores.calibratedMinimumOn[i]);
            Serial.print(' ');
        }
        Serial.println();
        Serial.println();
        delay(1000);
    }
}
void loop(){
/* Função readLine retorna a posição da linha. Equação:
       0*value0 + 1000*value1 + 2000*value2 + ...
      --------------------------------------------
             value0  +  value1  +  value2 + ...
*/
    unsigned int position = sensores.readLine(sensorValues);
    if(DEBUG) { 
        for(int i = 0; i < NUM_SENSORES; i++){
            Serial.print(sensorValues[i]);
            Serial.print('\t');
        }
        Serial.println(position);
        delay(250);    
    }
}
void correcao(){
    return  (kp * erro) + (kd * (erro - erroAnterior)) + (ki * somatorioDeErro);
}
//Função para permitir apenas potências abaixo da máxima
int limitadorPotencia(int potencia) {
  int novaPotencia = potencia;
  if (abs(potencia) > VELOCIDADE_MAXIMA) {
    novaPotencia = (potencia / abs(potencia)) * VELOCIDADE_MAXIMA;
  }
  return novaPotencia;
}
//Controla o motor esquerdo para uma dada potência após ser limitada
void motorEsquerdo(int potencia) {
  int pwr = limitadorPotencia(potencia);
  if(DEBUG == 0){
    if (pwr < 0) {
      analogWrite(MOTOR_E1, abs(pwr));
      digitalWrite(MOTOR_E2, LOW);
    }
    else {
      analogWrite(MOTOR_E2, abs(pwr));
      digitalWrite(MOTOR_E1, LOW);
    }
  }
}
//Controla o motor direito para uma dada potência após ser limitada
void motorDireito(int potencia) {
  int pwr = limitadorPotencia(potencia);
  if(DEBUG==0){
    if (pwr < 0) {
      digitalWrite(MOTOR_D1, LOW);
      analogWrite(MOTOR_D2, abs(pwr));
    }
    else {
      digitalWrite(MOTOR_D2, LOW);
      analogWrite(MOTOR_D1, abs(pwr));
    }
  }
}
